//Cg
//
//Cg profile arbvp1 arbfp1

void vshader(float4 vtx_position : POSITION, 
             float2 vtx_texcoord0 : TEXCOORD0,
             out float4 l_position : POSITION,
      	     out float2 l_texcoord0 : TEXCOORD0,
             uniform float4 texpad_src,
             uniform float4x4 mat_modelproj)
{
  l_position=mul(mat_modelproj, vtx_position);
  l_texcoord0 = (vtx_position.xz * texpad_src.xy) + texpad_src.xy;
}


void fshader(float2 l_texcoord0 : TEXCOORD0,
             out float4 o_color : COLOR,
             uniform float2 texpix_src,
             uniform sampler2D k_src : TEXUNIT0)
{
/*
  float3 offset = float3(1.0*texpix_src.y, 2.0*texpix_src.y, 3.0*texpix_src.y);
  o_color  = tex2D(k_src, l_texcoord0);
  o_color += tex2D(k_src, float2(l_texcoord0.x, l_texcoord0.y - offset.z));
  o_color += tex2D(k_src, float2(l_texcoord0.x, l_texcoord0.y - offset.y));
  o_color += tex2D(k_src, float2(l_texcoord0.x, l_texcoord0.y - offset.x));
  o_color += tex2D(k_src, float2(l_texcoord0.x, l_texcoord0.y + offset.x));
  o_color += tex2D(k_src, float2(l_texcoord0.x, l_texcoord0.y + offset.y));
  o_color += tex2D(k_src, float2(l_texcoord0.x, l_texcoord0.y + offset.z));
  o_color /= 7;
  o_color.w = 1;
*/

  // Equivalent, faster (only 4 lookups). Requires input and output textures to have the same resolution.
  //
  // For details, see comment in filter-blurx.sha.
  //
  const float4 offsets = float4( -2.5, -0.6667, 0.6667, 2.5 )*texpix_src.y;
  const float4 weights = float4(  2.0,  1.5,    1.5,    2.0 );
  const float w = 2.0 + 1.5 + 1.5 + 2.0;
  o_color  = weights.x * tex2D(k_src, float2(l_texcoord0.x, l_texcoord0.y + offsets.x));
  o_color += weights.y * tex2D(k_src, float2(l_texcoord0.x, l_texcoord0.y + offsets.y));
  o_color += weights.z * tex2D(k_src, float2(l_texcoord0.x, l_texcoord0.y + offsets.z));
  o_color += weights.w * tex2D(k_src, float2(l_texcoord0.x, l_texcoord0.y + offsets.w));
  o_color /= w;
//  o_color.a   = 1.0;
}

